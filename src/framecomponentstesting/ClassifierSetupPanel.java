/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package framecomponentstesting;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author Alisa
 */
public class ClassifierSetupPanel extends javax.swing.JPanel {

    public static Dimension panelSize = new Dimension(800, 650);

    String classifierCommand = null;
    String testCommand = null;
    String trainCommand = null;
    String classifyCommand = null;

    static int leftBuffer = 50;
    static int hozSpace = 360;

    JLabel titleLabel;
    static int titleLocX = leftBuffer;
    static int titleLocY = 20;

    JLabel[] instructionsLabel;
    static int instructionsLocX = leftBuffer;
    static int instructionsTopBuffer = titleLocY + 60;

    static int instructionsVerSpace = 20;

    JLabel[] shortcutLabels;
    public static String classifierShortcut = "<classifier>";
    public static String optionsShortcut = "<options>";
    public static String datasetShortcut = "<dataset>";
    public static String featureFileShortcut = "<feature file>";
    public static String imageShorcut = "<images>";
    public static String[] shortcuts = {classifierShortcut,
        optionsShortcut,
        datasetShortcut,
        featureFileShortcut,
        imageShorcut};
    public static String[] shortcutsInfo = {"classifier command call",
        "command line options",
        "path to dir of sub-dirs containing class images",
        "path to file generated by train command",
        "path to new image file or directory"};
    static int shortcutsLocX = leftBuffer + hozSpace;
    static int shortcutsTopBuffer = instructionsTopBuffer + 5;

    String[] labelTexts = {"CLASSIFIER COMMAND CALL: ",
        "TRAIN COMMAND: ",
        "TEST COMMAND: ",
        "CLASSIFY COMMAND: "};

    JLabel[] labels = new JLabel[labelTexts.length];
    static int labelCols = 2;
    static int labelLocX = leftBuffer;
    static int labelTopBuffer = instructionsTopBuffer + 130;

    static int labelVerSpace = 100;
    static int labelHozSpace = hozSpace;

    JTextField[] tfs = new JTextField[labelTexts.length];
    static int textFieldTopBuffer = labelTopBuffer + 30;
    static int textFieldX = leftBuffer;
    static int textFieldWidth = 300;
    static int textFieldHeight = 30;

    JLabel[] infoLabels = new JLabel[labelTexts.length];
    String[] infoLabelTexts = {"EX: \"classifier1\", \"C:/classifier.exe\"",
        "EX: \"" + classifierShortcut + " train " + optionsShortcut + " " + datasetShortcut + " " + featureFileShortcut + "\"",
        "EX: \"" + classifierShortcut + " test " + optionsShortcut + " " + datasetShortcut + "\"",
        "EX: \"" + classifierShortcut + " classify " + optionsShortcut + " " + featureFileShortcut + " " + imageShorcut + "\""};
    static int infoLabelTopBuffer = textFieldTopBuffer + textFieldHeight + 5;

    JLabel optionsTitleLabel;
    static int optionsTitleLocX = leftBuffer;
    static int optionsTitleLocY = textFieldTopBuffer + 180;
    String[] optionLabelsTexts = {"Key", "Possible Values"};
    int[] optionLabelsWidths = {50, textFieldWidth - 50 - 20};
    JLabel[] optionLabels = new JLabel[optionLabelsTexts.length];
    JLabel optionsDashLabel;

    JTextField[] optionTFs = new JTextField[optionLabelsTexts.length];
    JLabel[] optionInfoLabels = new JLabel[optionLabelsTexts.length];
    int optionLabelX = leftBuffer;
    int optionLabelY = optionsTitleLocY + 40;
    int optionTFY = optionLabelY + 30;

    String[] optionLabelsInfoTexts = {"EX: \"f\",\"D\"", "EX: \"1,3,5\",\"2-4\""};
    int optionInfoLabelsX = leftBuffer;
    int optionInfoLabelsY = optionTFY + 35;

    JLabel savedOptionsTitleLabel;
    static int savedOptionsTitleLocY = optionsTitleLocY;
    static int savedOptionsTitleLocX = leftBuffer + hozSpace;
    ArrayList<String> optionInputs = new ArrayList<>();
    ArrayList<JLabel> optionInputLabels = new ArrayList<>();
    int optionInputLabelsTopBuffer = optionLabelY;
    int optionInputMax = 5;

    ArrayList<JButton> deleteButtons = new ArrayList<>();
    int deleteButtonsLocX = savedOptionsTitleLocX + 250;
    
    static int buttonSize=100;
    JButton nextButton;
    JButton cancelButton;
    static int confirmButtonsY = savedOptionsTitleLocY + 200;
    int nextButtonLocX = deleteButtonsLocX;
    int cancelButtonLocX = nextButtonLocX-buttonSize-10;
    

    public static String keyMarker = "[KEY]";
    public static String valuesMarker = "[VALUES]";
    public static int instructionsY1 = instructionsTopBuffer - 10;
    public static int instructionsY2 = labelTopBuffer - 10;
    public static int bottomRectY1 = confirmButtonsY - 10;
    //public static int bottomRectY2 = savedOptionsTitleLocY + 100;

    static int tinyFontSize = 14;

    static final Font tinyFont = new Font("Tw Cen MT Condensed", 1, tinyFontSize);

    /**
     * Creates new form ClassifierSetupPanel
     */
    public ClassifierSetupPanel() {
        initComponents();
        setBackground(Color.white);
        setPreferredSize(panelSize);
        createComponents();
        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
     @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Painter.paintBlueClassifierTopRect(g);
        Painter.paintBlueClassifierBottomRect(g);
    }

    private void createComponents() {
        removeAll();
        createTitleLabel();
        createInstructionsLabel();
        createShortcutLabels();
        createLabels();
        createTFs();
        createInfoLabels();

        createOptionsTitleLabel();
        createOptionLabels();
        createOptionTFs();
        createOptionInfoLabels();
        createOptionInputLabels();
        createOptionInputButtons();

        createConfirmButtons();
        revalidate();
        repaint();

    }

    private void createLabels() {
        for (int i = 0; i < labelTexts.length; i++) {
            labels[i] = new JLabel(labelTexts[i]);
            labels[i].setText(labelTexts[i]);
            labels[i].setForeground(Color.blue);

            Dimension newSize = new Dimension(200, labels[i].getPreferredSize().height);
            int col = i % labelCols;
            int row = i / labelCols;
            int x = labelLocX + labelHozSpace * col;
            int y = labelTopBuffer + labelVerSpace * row;
            labels[i].setBounds(x, y, 200, labels[i].getPreferredSize().height);
            labels[i].setSize(newSize);
            labels[i].setFont(SmartLabel.smallFont);
            add(labels[i]);
        }
    }

    //JTextField textField = new JTextField(10);
    //
    Action classifierTFAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            classifierCommand = tfs[0].getText();
        }
    };
    Action trainTFAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            trainCommand = tfs[1].getText();
        }
    };
    Action testTFAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            testCommand = tfs[2].getText();
        }
    };
    Action classifyTFAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            classifyCommand = tfs[3].getText();
        }
    };
    Action[] actions = {classifierTFAction, trainTFAction, testTFAction, classifyTFAction};

    private void createTFs() {

        for (int i = 0; i < labelTexts.length; i++) {
            int col = i % labelCols;
            int row = i / labelCols;
            int x = textFieldX + labelHozSpace * col;
            int y = textFieldTopBuffer + labelVerSpace * row;
            tfs[i] = new JTextField();
            if (i > 0) {
                tfs[i].setText(classifierShortcut);
            }
            tfs[i].setBounds(x, y, textFieldWidth, textFieldHeight);
            //tfs[i].setFont(SmartLabel.smallFont);
            tfs[i].addActionListener(actions[i]);
            add(tfs[i]);
        }
    }

    private void createInfoLabels() {
        for (int i = 0; i < infoLabelTexts.length; i++) {
            infoLabels[i] = new JLabel();
            infoLabels[i].setText(infoLabelTexts[i]);
            infoLabels[i].setForeground(Color.black);
            int col = i % labelCols;
            int row = i / labelCols;
            int x = textFieldX + labelHozSpace * col;
            int y = infoLabelTopBuffer + labelVerSpace * row;
            infoLabels[i].setBounds(x, y, 300, 20);
            infoLabels[i].setSize(infoLabels[i].getPreferredSize());
            infoLabels[i].setFont(tinyFont);
            add(infoLabels[i]);
        }
    }

    private void createTitleLabel() {
        titleLabel = new JLabel("ENTER CLASSIFIER COMMANDS");
        titleLabel.setForeground(Color.blue);

        titleLabel.setBounds(titleLocX, titleLocY, 200, 20);

        titleLabel.setFont(SmartLabel.mediumLargeFont);
        titleLabel.setSize(titleLabel.getPreferredSize());
        add(titleLabel);
    }

    private void createInstructionsLabel() {
        String text = ("INSTRUCTIONS: Enter the structure of the"
                + "\nclassifier's terminal commands for each"
                + "\nclassifier function. Use the descriptors"
                + "\non the right in \"<>\", where applicable."
                + "\nPress enter to save input.").toUpperCase();
        String texts[] = text.split("\n");
        instructionsLabel = new JLabel[texts.length];
        for (int i = 0; i < texts.length; i++) {
            instructionsLabel[i] = new JLabel(texts[i]);
            instructionsLabel[i].setForeground(Color.white);

            instructionsLabel[i].setBounds(instructionsLocX, instructionsTopBuffer + instructionsVerSpace * i, 200, 20);

            instructionsLabel[i].setFont(SmartLabel.smallFont);
            instructionsLabel[i].setSize(instructionsLabel[i].getPreferredSize());
            add(instructionsLabel[i]);
        }

    }

    private void createShortcutLabels() {
        shortcutLabels = new JLabel[shortcuts.length];
        for (int i = 0; i < shortcuts.length; i++) {
            shortcutLabels[i] = new JLabel(shortcuts[i] + " = " + shortcutsInfo[i]);
            shortcutLabels[i].setForeground(Color.yellow);

            shortcutLabels[i].setBounds(shortcutsLocX, shortcutsTopBuffer + instructionsVerSpace * i - 5, 200, 20);

            shortcutLabels[i].setFont(SmartLabel.smallFont);
            shortcutLabels[i].setSize(shortcutLabels[i].getPreferredSize());
            add(shortcutLabels[i]);
        }
    }

    private void createOptionsTitleLabel() {
        optionsTitleLabel = new JLabel("ADD COMMAND OPTIONS");
        optionsTitleLabel.setForeground(Color.black);
        optionsTitleLabel.setBounds(optionsTitleLocX, optionsTitleLocY, 200, 20);
        optionsTitleLabel.setFont(SmartLabel.mediumFont);
        optionsTitleLabel.setSize(optionsTitleLabel.getPreferredSize());
        add(optionsTitleLabel);

        savedOptionsTitleLabel = new JLabel("SAVED COMMAND OPTIONS");
        savedOptionsTitleLabel.setForeground(Color.green);
        savedOptionsTitleLabel.setBounds(savedOptionsTitleLocX, savedOptionsTitleLocY, 200, 20);
        savedOptionsTitleLabel.setFont(SmartLabel.mediumFont);
        savedOptionsTitleLabel.setSize(savedOptionsTitleLabel.getPreferredSize());
        savedOptionsTitleLabel.setVisible((optionInputLabels.size()>0));
        add(savedOptionsTitleLabel);
    }

    private void createOptionLabels() {
        for (int i = 0; i < optionLabelsTexts.length; i++) {
            optionLabels[i] = new JLabel(optionLabelsTexts[i]);
            optionLabels[i].setForeground(Color.blue);
            int x = optionLabelX;
            if (i == 1) {
                x += optionLabelsWidths[0] + 20;
            }
            optionLabels[i].setBounds(x, optionLabelY, 200, 20);

            optionLabels[i].setFont(SmartLabel.smallFont);
            optionLabels[i].setSize(optionLabels[i].getPreferredSize());
            add(optionLabels[i]);
        }
    }
    Action optionTFAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            createNewOption();
        }
    };
    Action deleteButton1Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(0);
        }

    };
    Action deleteButton2Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(1);
        }
    };
    Action deleteButton3Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(2);
        }
    };
    Action deleteButton4Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(3);
        }
    };
    Action deleteButton5Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(4);
        }
    };

    private void deleteOption(int idx) {
        //check
        optionInputLabels.remove(idx);
        deleteButtons.remove(idx);
        createComponents();

    }

    private void createOptionTFs() {
        optionsDashLabel = new JLabel("-");
        optionsDashLabel.setForeground(Color.black);
        optionsDashLabel.setBounds(leftBuffer - 10, optionTFY, 50, 20);
        optionsDashLabel.setFont(SmartLabel.mediumFont);
        add(optionsDashLabel);

        for (int i = 0; i < optionLabelsTexts.length; i++) {

            int x = optionLabels[i].getLocation().x;
            int y = optionTFY;
            optionTFs[i] = new JTextField();
            optionTFs[i].setBounds(x, y, optionLabelsWidths[i], textFieldHeight);
            //tfs[i].setFont(SmartLabel.smallFont);
            optionTFs[i].addActionListener(optionTFAction);
            add(optionTFs[i]);
        }
    }

    private void createOptionInfoLabels() {
        for (int i = 0; i < optionLabelsTexts.length; i++) {
            optionInfoLabels[i] = new JLabel(optionLabelsInfoTexts[i]);
            optionInfoLabels[i].setForeground(Color.black);
            optionInfoLabels[i].setBounds(optionTFs[i].getLocation().x, optionInfoLabelsY + 10, 300, 20);
            optionInfoLabels[i].setSize(optionInfoLabels[i].getPreferredSize());
            optionInfoLabels[i].setFont(tinyFont);
            add(optionInfoLabels[i]);
        }
    }

    boolean validOptions() {
        return true;
    }

    private void createNewOption() {
        if (validOptions()) {
            String key = optionTFs[0].getText();
            String values = optionTFs[1].getText();
            String showText = "-" + key + " [" + values + "]";
            optionInputs.add(keyMarker + key + valuesMarker + values);
            createNewOptionLabel(showText);
            repaint();
        }

    }

    private void createNewOptionLabel(String showText) {
        if (optionInputLabels.size() >= optionInputMax) {
            return;
        }
        savedOptionsTitleLabel.setVisible(true);
        JLabel newOptionLabel = new JLabel(showText);
        optionInputLabels.add(newOptionLabel);
        createOptionInputLabels();

        deleteButtons.add(new JButton());
        createOptionInputButtons();

    }

    private void createOptionInputLabels() {
        for (int i = 0; i < optionInputLabels.size(); i++) {
            JLabel label = optionInputLabels.get(i);
            label.setForeground(Color.green);
            int y = optionInputLabelsTopBuffer + i * 30;
            label.setBounds(savedOptionsTitleLocX, y, 300, 20);
            label.setFont(SmartLabel.smallFont);
            add(label);
        }

    }

    private void createOptionInputButtons() {
        Action[] deleteActions={deleteButton1Action, deleteButton2Action, deleteButton3Action, deleteButton4Action, deleteButton5Action};
        for (int i = 0; i < deleteButtons.size(); i++) {
            JButton delete = deleteButtons.get(i);
            delete.setText("delete");
            delete.setForeground(Color.red);
            int y = optionInputLabelsTopBuffer + i * 30;
            delete.setBounds(deleteButtonsLocX, y, 100, 20);
            delete.setFont(SmartLabel.smallFont);
            delete.addActionListener(deleteActions[i]);
            add(delete);
        }
    }
        Action cancelAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("Cancel!");
        }
    };
            Action nextAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("next!");
        }
    };

    private void createConfirmButtons() {
        nextButton = new JButton("NEXT");
        nextButton.setForeground(Color.red);
        int nextY = confirmButtonsY;
        nextButton.setBounds(nextButtonLocX, nextY, 100, 20);
        nextButton.setFont(SmartLabel.smallFont);
        nextButton.addActionListener(nextAction);
        add(nextButton);

        cancelButton = new JButton("CANCEL");
        cancelButton.setForeground(Color.red);
        int cancelY = confirmButtonsY;
        cancelButton.setBounds(cancelButtonLocX, cancelY, 100, 20);
        cancelButton.setFont(SmartLabel.smallFont);
        cancelButton.addActionListener(cancelAction);
        add(cancelButton);
    }
}
