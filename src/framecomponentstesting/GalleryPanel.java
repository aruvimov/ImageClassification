/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package framecomponentstesting;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Alisa
 */
public class GalleryPanel extends javax.swing.JPanel {

    SmartLabel titleLabel = null;
    SmartLabel returnLabel = null;
    SmartLabel imageDisplayLabel = null;
    ArrayList<SmartLabel> iconLabels = null;

    /**
     * Creates new form GalleryPanel
     */
    public GalleryPanel() {
        initComponents();

        createComponents();
        setBackground(Color.white);
        setPreferredSize(new Dimension(900, 580));
        //createNewLabel();
        setVisible(true);
    }

    protected static ImageIcon createImageIcon(String path,
            String description) {

        java.net.URL imgURL = GalleryPanel.class.getResource(path);
        if (imgURL != null) {
            System.out.println("Found path!");
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(750, 700));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        System.out.println("panel caught mouse press");
        checkIfMousePressOnPressableComponent(evt.getX(), evt.getY());
    }//GEN-LAST:event_formMousePressed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        checkIfMouseHoverOnPressableComponent(evt.getX(), evt.getY());
    }//GEN-LAST:event_formMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Painter.paintTitleUnderline(g, titleLabel.getLocation(),
                titleLabel.getPreferredSize());
        Painter.paintLabelSelection(g);

//        g.setColor(Color.white); 
//        String s = "Art History";
//        g.drawString(Globals.getTitle(), 20, 20);
    }

    public void updateLabel(JLabel label, String text) {
        label.setText(text);
        //update label size to accomodate string length:
        label.setSize(titleLabel.getPreferredSize());

    }

    private void checkIfMouseHoverOnPressableComponent(int mouseX, int mouseY) {
        checkIfMouseHoverOnTitle(mouseX, mouseY);
        checkIfMouseHoverOnIcon(mouseX, mouseY);
        checkIfMouseHoverOnReturn(mouseX, mouseY);

    }

    private void checkIfMousePressOnPressableComponent(int mouseX, int mouseY) {
        checkIfMousePressOnTitle(mouseX, mouseY);
        checkIfMousePressOnIcon(mouseX, mouseY);
        checkIfMousePressOnReturn(mouseX, mouseY);

    }

    private String promptUserForTextEdit(JLabel label) {
        String text = JOptionPane.showInputDialog("Edit Title", label.getText());
        if (text==null||text.equals("")) {
            return label.getText();
        }
        return text;

    }

    private void removeComponents() {
        //removeAll();
        if (titleLabel != null) {
            remove(titleLabel);
        }
        if (returnLabel != null) {
            remove(returnLabel);
        }
        if (iconLabels != null) {
            for (SmartLabel iconLabel : iconLabels) {
                remove(iconLabel);
            }
        }
        if (imageDisplayLabel != null) {
            remove(imageDisplayLabel);
        }
       
        titleLabel=null;
        returnLabel=null;
        iconLabels=null;
        imageDisplayLabel=null;
        Painter.selectedLabelLoc= null;

        revalidate();
    }

    private void createComponents() {

        removeComponents();

        createReturnLabel();
        createTitleLabel();
        if (FileManager.displayImage) {
            createImageDisplay();
        } else {
            createIconLabels();
        }
        revalidate();
        repaint();
        //titleLabel.setFont(null);
        //titleLabel.setForeground(Color.red);
    }

    private void createNewLabel() {

        //ImageIcon icon = createImageIcon("/test.png", "png");
        ImageIcon icon = createImageIcon("/images/#####images.png", "png");
        //ImageIcon icon2 = createImageIcon("/images/ArtHistory/ArtHistory#####.png", "png");
        //in order to resize the icon, have to transform it back into an image
        Image image = icon.getImage(); // transform it 
        Image newimg = image.getScaledInstance(100, 100, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
        icon = new ImageIcon(newimg);

        JLabel label1 = new JLabel(icon);
        label1.setText("Easy Way");
        label1.setHorizontalTextPosition(JLabel.CENTER);
        label1.setVerticalTextPosition(JLabel.BOTTOM);
        label1.setBounds(50, 20, 100, 150);
        label1.setVisible(true);
        add(label1);

        validate();
        repaint();
//        //
//        JLabel label2 = new JLabel(icon);
//        label2.setLayout(new BoxLayout(label2, BoxLayout.Y_AXIS));
//        add(label2);
//
//        JLabel text = new JLabel("More Control");
//        text.setAlignmentX(JLabel.CENTER_ALIGNMENT);
//        label2.add(Box.createVerticalGlue());
//        label2.add(text);
//        label2.add(Box.createVerticalStrut(10));
//
//        //
//        JLabel label3 = new JLabel(icon);
//        label3.setLayout(new GridBagLayout());
//        add(label3);
//
//        JLabel text3 = new JLabel();
//        text3.setText("<html><center>Text<br>over<br>Image<center></html>");
//        text3.setLocation(20, 20);
//        text3.setSize(text3.getPreferredSize());
//        label3.add(text3);
//
//        //
//        JLabel label4 = new JLabel(icon);
//        add(label4);
//
//        JTextPane textPane = new JTextPane();
//        textPane.setText("Add some text that will wrap at your preferred width");
//        textPane.setEditable(false);
//        textPane.setOpaque(false);
//        SimpleAttributeSet center = new SimpleAttributeSet();
//        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
//        StyledDocument doc = textPane.getStyledDocument();
//        doc.setParagraphAttributes(0, doc.getLength(), center, false);
//        textPane.setBounds(20, 20, 75, 100);
//        label4.add(textPane);

    }

    private void createTitleLabel() {
        titleLabel = FileManager.createTitleLabel();
        add(titleLabel);

    }

    private void createIconLabels() {
        iconLabels = FileManager.createIconLabels();
        for (SmartLabel l : iconLabels) {
            add(l);
        }
    }

    private void createReturnLabel() {
        if (FileManager.level > 0) {
            returnLabel = FileManager.createReturnLabel();
            add(returnLabel);
        }
    }

    private void checkIfMouseHoverOnTitle(int mouseX, int mouseY) {
// title labels are editable at level 1+
        if ((FileManager.level != 0) && titleLabel.mouseOnLabel(mouseX, mouseY) && !Painter.underlineTitle) {
            Painter.setUnderlineTitle(true);
            repaint();
        } else if (Painter.underlineTitle && !titleLabel.mouseOnLabel(mouseX, mouseY)) {
            Painter.setUnderlineTitle(false);
            repaint();
        }
    }

    private void checkIfMouseHoverOnIcon(int mouseX, int mouseY) {
        //we don't have any icons, so no worries!
        if (iconLabels==null) {
            return;
        }
        //otherwise, select or deselect, as needed
        Point selectedLabel = SmartLabel.getPointIfMouseOnIconLabel(mouseX, mouseY, iconLabels.size());
        if ((Painter.selectedLabelLoc == null) && (selectedLabel != null)) {
            Painter.setSelectedLabel(selectedLabel);
            repaint();

        } else if (Painter.selectedLabelLoc != null) {
            if (selectedLabel == null) {
                Painter.setSelectedLabel(null);//null
                repaint();

            } else if ((Painter.selectedLabelLoc.x != selectedLabel.x) || (Painter.selectedLabelLoc.y != selectedLabel.y)) {
                Painter.setSelectedLabel(selectedLabel);
                repaint();
            }
            //FileManager.checkIfMousePressOnIconLabel(int mouseX, int mouseY);
        }
    }

    private void checkIfMousePressOnTitle(int mouseX, int mouseY) {
        // title labels are editable at level 1+
        if ((FileManager.level != 0) && titleLabel.mouseOnLabel(mouseX, mouseY)) {
            Painter.setUnderlineTitle(false);
            repaint();
            String newText = promptUserForTextEdit(titleLabel);
            updateDirTitle(newText);
            
        }
    }

    private void checkIfMousePressOnIcon(int mouseX, int mouseY) {
        File selectedLabel = SmartLabel.getFileIfMouseOnIconLabel(mouseX, mouseY, iconLabels);
        if (selectedLabel != null) {
            System.out.println("navigating to selected label");
            navigateTo(selectedLabel);
        } else {
            System.out.println("no label found");
        }
    }

    private void checkIfMouseHoverOnReturn(int mouseX, int mouseY) {
        if (FileManager.level != 0) {
            if (returnLabel.mouseOnLabel(mouseX, mouseY)) {
                returnLabel.setForeground(Color.red);
            } else {
                returnLabel.setForeground(Color.gray);
            }
        }
    }

    private void checkIfMousePressOnReturn(int mouseX, int mouseY) {
        if ((FileManager.level != 0) && returnLabel.mouseOnLabel(mouseX, mouseY)) {
            navigateTo(null);
        }

    }

    private void navigateTo(File selectedLabel) {
        FileManager.navigateTo(selectedLabel);
        createComponents();
    }

    private void updateDirTitle(String newText) {
        
        FileManager.renameDir(titleLabel, newText);
        updateLabel(titleLabel, newText);
    }

    private void createImageDisplay() {
        imageDisplayLabel = FileManager.createImageDisplayLabel();
        add(imageDisplayLabel);
        
    }

}
