/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package framecomponentstesting;

import static framecomponentstesting.ClassifierManager.OPT_KEY_VALUE_SEPARATOR;
import static framecomponentstesting.ClassifierManager.OPT_VALUE_FORMATTED_END;
import static framecomponentstesting.ClassifierManager.OPT_VALUE_FORMATTED_START;
import static framecomponentstesting.ClassifierManager.SPACE;
import static framecomponentstesting.ClassifierManager.SPACE2;
import static framecomponentstesting.ClassifierSetupDialog.CLASSIFY;
import static framecomponentstesting.ClassifierSetupDialog.CLASSIFY_INT;
import static framecomponentstesting.ClassifierSetupDialog.FOOTNOTE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.REGULAR_BLUE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.REGULAR_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.STEP_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.SUB_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.TEST;
import static framecomponentstesting.ClassifierSetupDialog.TEST_INT;
import static framecomponentstesting.ClassifierSetupDialog.TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.TRAIN;
import static framecomponentstesting.ClassifierSetupDialog.TRAIN_INT;
import static framecomponentstesting.ClassifierSetupDialog.col2Buffer;
import static framecomponentstesting.ClassifierSetupDialog.confirmButtonsH;
import static framecomponentstesting.ClassifierSetupDialog.confirmButtonsW;
import static framecomponentstesting.ClassifierSetupDialog.fieldBuffer;
import static framecomponentstesting.ClassifierSetupDialog.footnoteBuffer;
import static framecomponentstesting.ClassifierSetupDialog.hozSpace;
import static framecomponentstesting.ClassifierSetupDialog.leftBuffer;
import static framecomponentstesting.ClassifierSetupDialog.regularFont;
import static framecomponentstesting.ClassifierSetupDialog.smallBuffer;
import static framecomponentstesting.ClassifierSetupDialog.stepTitleLocY;
import static framecomponentstesting.ClassifierSetupDialog.subTitleBuffer;
import static framecomponentstesting.ClassifierSetupDialog.tfRegularHeight;
import static framecomponentstesting.ClassifierSetupDialog.tfRegularWidth;
import static framecomponentstesting.ClassifierSetupDialog.title2LocY;
import static framecomponentstesting.ClassifierSetupDialog.titleBoxBuffer;
import static framecomponentstesting.ClassifierManager.classifierShortcut;
import static framecomponentstesting.ClassifierManager.datasetShortcut;
import static framecomponentstesting.ClassifierManager.featureFileShortcut;
import static framecomponentstesting.ClassifierManager.imageShorcut;
import static framecomponentstesting.ClassifierManager.optionsShortcut;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Alisa
 */
public class ClassifierSetupPanelStep2 extends javax.swing.JPanel {

    Dimension panelSize = ClassifierSetupDialog.panelSize;
    ClassifierSetupDialog dialog;
    JPanel me;

    final int FINAL_PAGE = CLASSIFY_INT;
    final int instructionsLocY = title2LocY + 10;
    final int commandLocY = instructionsLocY + 130;
    final int commandVerSpace = 100;
    String function;
    int page;

    JTextField commandTF = new JTextField("");
    JTextField keyTF = new JTextField("");
    JTextField valuesTF = new JTextField("");
    ArrayList<String> savedOptions = new ArrayList<>();
    int col2Buffer2 = col2Buffer;

    /**
     * Creates new form ClassifierSetupPanelStep2
     */
    public ClassifierSetupPanelStep2(ClassifierSetupDialog d, int page) {
        initComponents();
        me = this;
        this.page = page;
        function = getFunction(page);
        dialog = d;
        setBackground(Color.white);
        setPreferredSize(panelSize);
        fillData();
        createComponents();
        
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Painter.paintBlueClassifierRect(g, commandLocY);
//        Painter.paintBlueClassifierRect(g, terminalTitleLocY);
        Painter.paintBlueClassifierBottomRect(g);
    }

    private void createComponents() {
        String commandText = commandTF.getText();
        String keyText = keyTF.getText();
        String valuesText = valuesTF.getText();
        removeAll();
        createStepTitle();

        createInstructions();

        createCommandTitle();
        createCommandSubTitles();
        createCommandFields();
        createSavedOptions();

        createConfirmButtons();

//        commandTF.setText(commandText);
//        keyTF.setText(keyText);
//        valuesTF.setText(valuesText);

        repaint();
    }

    JLabel formatLabel(JLabel label, int labelType) {
        return ClassifierSetupDialog.formatLabel(label, labelType);
    }

    private void createStepTitle() {
        JLabel titleLabel = new JLabel("STEP 2 OF 3: TERMINAL COMMANDS");
        titleLabel.setBounds(leftBuffer, stepTitleLocY, 200, 20);
        add(formatLabel(titleLabel, STEP_TITLE_LABEL));
    }
    Action backAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            dialog.recordData(combineData());
            System.out.println("back!");
            dialog.goToPage(me, page - 1);

        }
    };
    Action cancelAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("Cancel!");
            dialog.cancel();
        }
    };
    Action nextAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("next!");
            dialog.recordData(combineData());
            dialog.goToPage(me, page + 1);

        }
    };
    Action finishAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            dialog.recordData(combineData());
            dialog.finish();
            System.out.println("we're done!");

        }
    };

    private void createConfirmButtons() {
        JButton backButton = new JButton("BACK");
        backButton.setForeground(Color.black);
        backButton.setBounds(ClassifierSetupDialog.confirmButton0X,
                ClassifierSetupDialog.confirmButtonsY,
                ClassifierSetupDialog.confirmButtonsW,
                ClassifierSetupDialog.confirmButtonsH);
        backButton.setFont(regularFont);
        backButton.addActionListener(backAction);
        add(backButton);

        JButton cancelButton = new JButton("CANCEL");
        cancelButton.setForeground(Color.black);
        cancelButton.setBounds(ClassifierSetupDialog.confirmButton1X,
                ClassifierSetupDialog.confirmButtonsY,
                ClassifierSetupDialog.confirmButtonsW,
                ClassifierSetupDialog.confirmButtonsH);
        cancelButton.setFont(regularFont);
        cancelButton.addActionListener(cancelAction);
        add(cancelButton);

        JButton nextButton = new JButton("");
        if (page == FINAL_PAGE) {
            nextButton.setText("FINISH");
            nextButton.addActionListener(finishAction);
        } else {
            nextButton.setText("NEXT");
            nextButton.addActionListener(nextAction);
        }

        nextButton.setForeground(Color.green);
        nextButton.setBounds(ClassifierSetupDialog.confirmButton2X,
                ClassifierSetupDialog.confirmButtonsY,
                ClassifierSetupDialog.confirmButtonsW,
                ClassifierSetupDialog.confirmButtonsH);
        nextButton.setFont(regularFont);

        add(nextButton);

    }

    private void createInstructions() {
        JLabel titleLabel = new JLabel("INSTRUCTIONS");
        titleLabel.setBounds(leftBuffer, instructionsLocY, 200, 20);
        add(formatLabel(titleLabel, SUB_TITLE_LABEL));

        String text = ("Enter the structure of the classifier's "
                + "\nterminal commands for each classifier"
                + "\nfunction. Use the descriptors on the right"
                + "\nin pointed brackets \"<>\" where applicable.").toUpperCase();
        String texts[] = text.split("\n");
        int y = instructionsLocY + 30;
        int lineSpace = 20;
        for (int i = 0; i < texts.length; i++) {
            JLabel label = new JLabel(texts[i]);
            label.setBounds(leftBuffer, y + lineSpace * i, 200, 20);
            add(formatLabel(label, REGULAR_LABEL));
        }
        String[] shortcuts = {classifierShortcut,
            optionsShortcut,
            datasetShortcut,
            featureFileShortcut,
            imageShorcut};
        String[] shortcutsInfo = {"classifier command call",
            "command line options",
            "path to dir of sub-dirs containing class images",
            "path to file generated by train command",
            "path to new image file or directory"};
        for (int i = 0; i < shortcuts.length; i++) {
            JLabel label = new JLabel(shortcuts[i]);
            label.setBounds(col2Buffer2 - 5, instructionsLocY + lineSpace * i, 200, 20);
            add(formatLabel(label, REGULAR_BLUE_LABEL));

            JLabel infoLabel = new JLabel("= " + shortcutsInfo[i]);
            infoLabel.setBounds(col2Buffer2 + 100, instructionsLocY + lineSpace * i, 200, 20);
            add(formatLabel(infoLabel, REGULAR_LABEL));
        }
    }

    private void createCommandTitle() {
        JLabel titleLabel = new JLabel(function + " COMMAND");
        titleLabel.setBounds(leftBuffer, commandLocY + titleBoxBuffer, 200, 20);
        add(formatLabel(titleLabel, TITLE_LABEL));
    }

    private void createCommandSubTitles() {
        int y = commandLocY + subTitleBuffer;
        JLabel commandLabel = new JLabel(function + " COMMAND STRUCTURE:");
        commandLabel.setBounds(leftBuffer, y, 200, 20);
        add(formatLabel(commandLabel, SUB_TITLE_LABEL));

        JLabel optionsLabel = new JLabel(function + " COMMAND OPTIONS (UP TO 10):");
        optionsLabel.setBounds(leftBuffer, y + commandVerSpace, 200, 20);
        add(formatLabel(optionsLabel, SUB_TITLE_LABEL));
    }

    Action addOptionAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {

            if (savedOptions.size() >= 10) {
                return;
            }
            savedOptions.add(keyTF.getText() + OPT_KEY_VALUE_SEPARATOR+OPT_VALUE_FORMATTED_START + valuesTF.getText() + OPT_VALUE_FORMATTED_END+SPACE+SPACE2);
            createComponents();

        }
    };

    Action deleteAction0 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(0);
        }
    };
    Action deleteAction1 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(1);
        }
    };
    Action deleteAction2 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(2);
        }
    };
    Action deleteAction3 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(3);
        }
    };
    Action deleteAction4 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(4);
        }
    };
    Action deleteAction5 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(5);
        }
    };
    Action deleteAction6 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(6);
        }
    };
    Action deleteAction7 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(7);
        }
    };
    Action deleteAction8 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(8);
        }
    };
    Action deleteAction9 = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            deleteOption(9);
        }
    };

    Action[] deleteActions = {deleteAction0, deleteAction1, deleteAction2,
        deleteAction3, deleteAction4, deleteAction5, deleteAction6,
        deleteAction7, deleteAction8, deleteAction9};

    private void createCommandFields() {
        int y = commandLocY + fieldBuffer;
        int footnoteY = commandLocY + footnoteBuffer;

        JLabel commandFootnoteLabel = new JLabel(getCommandEx());
        commandFootnoteLabel.setBounds(leftBuffer, footnoteY, 200, 20);
        add(formatLabel(commandFootnoteLabel, FOOTNOTE_LABEL));

        commandTF.setBounds(leftBuffer, y, hozSpace, tfRegularHeight);
        add(commandTF);

        y += commandVerSpace;
        footnoteY += commandVerSpace;
        int x = leftBuffer;
        JLabel keyLabel = new JLabel("KEY: -");
        keyLabel.setBounds(x, y, 200, 20);
        add(formatLabel(keyLabel, REGULAR_LABEL));

        x += keyLabel.getWidth() + smallBuffer / 2;
        keyTF = new JTextField();
        keyTF.setBounds(x, y, tfRegularWidth / 5, tfRegularHeight);
        add(keyTF);

        JLabel keyFootnoteLabel = new JLabel("EX: \"f\"");
        keyFootnoteLabel.setBounds(x, footnoteY, 200, 20);
        add(formatLabel(keyFootnoteLabel, FOOTNOTE_LABEL));

        x += keyTF.getWidth() + smallBuffer;
        JLabel valuesLabel = new JLabel("POSSIBLE VALUES:");
        valuesLabel.setBounds(x, y, 200, 20);
        add(formatLabel(valuesLabel, REGULAR_LABEL));

        x += valuesLabel.getWidth() + smallBuffer;
        valuesTF = new JTextField();
        valuesTF.setBounds(x, y, hozSpace - x + leftBuffer, tfRegularHeight);
        add(valuesTF);

        JLabel valuesFootnoteLabel = new JLabel("EX: \"1, 3, 5\", \"on, off\"");
        valuesFootnoteLabel.setBounds(x, footnoteY, 200, 20);
        add(formatLabel(valuesFootnoteLabel, FOOTNOTE_LABEL));

        x += valuesTF.getWidth() + smallBuffer;
        JButton addButton = new JButton("ADD");
        addButton.setForeground(Color.green);
        addButton.setBounds(x, y, addButton.getPreferredSize().width, tfRegularHeight);
        addButton.addActionListener(addOptionAction);
        add(addButton);
    }

    private void createSavedOptions() {
        int y = commandLocY + subTitleBuffer;
        int x = col2Buffer2 + 100;
        JLabel savedOptionsTitle = new JLabel("SAVED OPTIONS:");
        savedOptionsTitle.setBounds(x, y, 200, 20);
        savedOptionsTitle = formatLabel(savedOptionsTitle, SUB_TITLE_LABEL);
        savedOptionsTitle.setForeground(Color.green);
        savedOptionsTitle.setVisible(savedOptions.size() > 0);
        add(savedOptionsTitle);

        int lineSpace = 20;
        y = commandLocY + fieldBuffer;
        int buttonSpace = 150;
        for (int i = 0; i < savedOptions.size(); i++) {
            JLabel savedLabel = new JLabel((i + 1) + ") -" + savedOptions.get(i).split(SPACE)[0]);
            savedLabel.setBounds(x, y + lineSpace * i, 200, 20);
            savedLabel = formatLabel(savedLabel, REGULAR_LABEL);
            savedLabel.setForeground(Color.black);
            add(savedLabel);

            JButton deleteButton = new JButton("delete");
            deleteButton.setForeground(Color.red);
            deleteButton.setBounds(x + buttonSpace, y + lineSpace * i, confirmButtonsW, confirmButtonsH);
            deleteButton.addActionListener(deleteActions[i]);
            add(deleteButton);
        }

    }

    private String getCommandEx() {
        String returnMe = "";
        if (page == TRAIN_INT) {
            returnMe = "EX: \"" + classifierShortcut + " train "
                    + optionsShortcut + " " + datasetShortcut + " "
                    + featureFileShortcut + "\"";
        } else if (page == TEST_INT) {
            returnMe = "EX: \"" + classifierShortcut + " test "
                    + optionsShortcut + " " + datasetShortcut + "\"";
        } else if (page == CLASSIFY_INT) {
            returnMe = "EX: \"" + classifierShortcut + " classify "
                    + optionsShortcut + " " + featureFileShortcut + " "
                    + imageShorcut + "\"";
        }

        return returnMe;
    }

    private String getFunction(int page) {
        switch (page) {
            case TRAIN_INT: {
                return TRAIN;
            }
            case TEST_INT: {
                return TEST;
            }
            case CLASSIFY_INT: {
                return CLASSIFY;
            }
            default: {
                return "NO FUNCTION";
            }
        }
    }

    String combineData() {

        String combinedData = "";

        if (page == TRAIN_INT) {
            combinedData += ClassifierManager.markTrainCmd(commandTF.getText());
            combinedData += ClassifierManager.markTrainCmdOpt(savedOptions);
        } else if (page == TEST_INT) {
            combinedData += ClassifierManager.markTestCmd(commandTF.getText());
            combinedData += ClassifierManager.markTestCmdOpt(savedOptions);
        } else if (page == CLASSIFY_INT) {
            combinedData += ClassifierManager.markClassifyCmd(commandTF.getText());
            combinedData += ClassifierManager.markClassifyCmdOpt(savedOptions);
        }
        return combinedData;
    }

    private void deleteOption(int i) {
        savedOptions.remove(i);
        createComponents();
    }

    private void fillData() {

        ArrayList<String> options = new ArrayList<>();
        String data = dialog.dataToString();

        if (page == TRAIN_INT) {
            commandTF.setText(ClassifierManager.unmarkTrainCmd(data));
            options = ClassifierManager.unmarkTrainCmdOpt(data);
        } else if (page == TEST_INT) {
            commandTF.setText(ClassifierManager.unmarkTestCmd(data));
            options = ClassifierManager.unmarkTestCmdOpt(data);
        } else if (page == CLASSIFY_INT) {
            commandTF.setText(ClassifierManager.unmarkClassifyCmd(data));
            options = ClassifierManager.unmarkClassifyCmdOpt(data);

        }
        for (String opt : options) {
                savedOptions.add(opt);
            }
        

    }

    private String getCommandMarker() {
        String commandMarker = "";
        if (page == TRAIN_INT) {
            commandMarker = ClassifierManager.TR_CMD_MARKER;
        } else if (page == TEST_INT) {
            commandMarker = ClassifierManager.TS_CMD_MARKER;
        } else if (page == CLASSIFY_INT) {
            commandMarker = ClassifierManager.CL_CMD_MARKER;
        }
        return commandMarker;
    }

    private String getCommandOptionMarker() {
        String commandOptionMarker = "";
        if (page == TRAIN_INT) {
            commandOptionMarker = ClassifierManager.TR_CMD_OPT_MARKER;
        } else if (page == TEST_INT) {
            commandOptionMarker = ClassifierManager.TS_CMD_OPT_MARKER;
        } else if (page == CLASSIFY_INT) {
            commandOptionMarker = ClassifierManager.CL_CMD_OPT_MARKER;
        }
        return commandOptionMarker;
    }
}
