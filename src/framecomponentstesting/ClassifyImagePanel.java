/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package framecomponentstesting;

import static framecomponentstesting.ClassifierSetupDialog.REGULAR_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.STEP_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.SUB_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.WHITE_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.blueBox1Y;
import static framecomponentstesting.ClassifierSetupDialog.formatLabel;
import static framecomponentstesting.ClassifierSetupDialog.leftBuffer;
import static framecomponentstesting.ClassifierSetupDialog.stepTitleLocY;
import static framecomponentstesting.ClassifierSetupDialog.subTitleBuffer;
import static framecomponentstesting.ClassifierSetupDialog.title2LocY;
import static framecomponentstesting.ClassifierSetupDialog.titleBoxBuffer;
import static framecomponentstesting.ClassifyImageFrame.mainImgHeight;
import static framecomponentstesting.FileManager.removeExt;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.File;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Alisa
 */
public class ClassifyImagePanel extends javax.swing.JPanel {

    ClassifyImageFrame frame;
    static Dimension panelSize = ClassifyImageFrame.panelSize;
    ArrayList<ClassifyData> classifyDataList;
    String imagePath;
    int imageLocY = title2LocY + subTitleBuffer;
    int bestGuessesY = imageLocY + mainImgHeight + 30;
    int imageWidth = 0;
    int imageHeight = 0;
    Result result;

    /**
     * Creates new form ClassifyImagePanel
     */
    public ClassifyImagePanel(ClassifyImageFrame frame, ArrayList<ClassifyData> classifyDataList, String imagePath) {
        initComponents();
        this.frame = frame;
        this.imagePath = imagePath;
        this.classifyDataList = classifyDataList;
        classify();
        setBackground(Color.white);
        setPreferredSize(panelSize);
        createComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Painter.paintBlueClassifierRect(g, blueBox1Y);
        Painter.paintBlueClassifierBottomRect(g);
        Painter.paintRect(g, Color.red, leftBuffer, imageLocY, imageWidth, imageHeight);
    }

    private void createComponents() {
        removeAll();
        createStepTitle();
        createImageTitle();
        createImage();
        //createCompareImages();
        createBestGuesses();
        createResultsPanel();
        //createConfirmButtons();
        repaint();
    }

    private void createStepTitle() {
        JLabel titleLabel = new JLabel("CLASSIFICATION RESULTS");
        titleLabel.setBounds(leftBuffer, stepTitleLocY, 200, 20);
        add(formatLabel(titleLabel, STEP_TITLE_LABEL));
    }

    private void createImageTitle() {
        JLabel titleLabel = new JLabel(getImageName());
        titleLabel.setBounds(leftBuffer, title2LocY + titleBoxBuffer, 200, 20);
        add(formatLabel(titleLabel, WHITE_TITLE_LABEL));
    }

    private void createImage() {
        JLabel imageLabel = new JLabel();
        Icon icon = FileManager.createClassifyIconImage(new File(imagePath));
        imageLabel.setIcon(icon);
        int y = imageLocY;
        imageWidth = icon.getIconWidth();
        imageHeight = icon.getIconHeight();
        imageLabel.setBounds(leftBuffer, y, imageWidth, imageHeight);
        add(imageLabel);

    }

    private String getImageName() {
        File img = new File(imagePath);
        return removeExt(img.getName());
    }

    private void createBestGuesses() {
        int count = 0;
        int y = bestGuessesY;
        int lineSpace = 40;
        for (ClassifyData datum : classifyDataList) {
            String options = "{" + datum.options + "}";
            if (datum.options==null) {
                options="";
            } 
            JLabel label = new JLabel((count + 1) + ") " + datum.classifierName.toUpperCase() + options);
            label.setBounds(leftBuffer, y + lineSpace *2* count, 50, 50);
            add(formatLabel(label, SUB_TITLE_LABEL));

           // result.getBestGuesses()
            Result.setSortOn(count);
            JLabel guessLabel = new JLabel("   "+result.bestGuess());
            guessLabel.setBounds(leftBuffer, y+lineSpace+lineSpace *2* count, 50, 50);
            add(formatLabel(guessLabel, SUB_TITLE_LABEL));
            //JButton button = new
            count++;
        }
    }

    private void createResultsPanel() {
        
        new ClassifyResultsFrame(result);
    }

    private void classify() {
         result = ClassifierManager.classify(classifyDataList, 
                imagePath, FileManager.currentDir);
    }

}
