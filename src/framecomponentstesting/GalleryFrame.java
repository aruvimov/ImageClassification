/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package framecomponentstesting;

import javax.swing.JOptionPane;

/**
 *
 * @author Alisa
 */
public class GalleryFrame extends javax.swing.JFrame {

    GalleryPanel gp;

    /**
     * Creates new form galleryFrame
     */
    public GalleryFrame() {
        initComponents();
        
        gp = new GalleryPanel(this);
        getContentPane().add(gp);
        setContentPane(gp);
        pack();
        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        addFolderMI = new javax.swing.JMenuItem();
        addFilesMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        newClassifierMI = new javax.swing.JMenuItem();
        editClassifierMI = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        resultsSettingsView = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        fileMenu.setText("File");
        fileMenu.setPreferredSize(new java.awt.Dimension(40, 19));
        fileMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fileMenuMousePressed(evt);
            }
        });
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        addFolderMI.setText("Add Folder...");
        addFolderMI.setPreferredSize(new java.awt.Dimension(130, 22));
        addFolderMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFolderMIActionPerformed(evt);
            }
        });
        fileMenu.add(addFolderMI);

        addFilesMI.setText("Add Files...");
        addFilesMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilesMIActionPerformed(evt);
            }
        });
        fileMenu.add(addFilesMI);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Classifier");

        newClassifierMI.setText("New Classifier");
        newClassifierMI.setPreferredSize(new java.awt.Dimension(130, 22));
        newClassifierMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newClassifierMIActionPerformed(evt);
            }
        });
        jMenu2.add(newClassifierMI);

        editClassifierMI.setText("Edit Classifier...");
        editClassifierMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editClassifierMIActionPerformed(evt);
            }
        });
        jMenu2.add(editClassifierMI);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Results");

        resultsSettingsView.setText("Results Settings");
        resultsSettingsView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsSettingsViewActionPerformed(evt);
            }
        });
        jMenu1.add(resultsSettingsView);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        System.out.println("Frame caught mouse press");
    }//GEN-LAST:event_formMousePressed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
//        int x = evt.getX();
//        int y = evt.getY();
//        if (Painter.mouseOnTitle(x,y)) {
//            Painter.setUnderlineTitle(true);
//        }
    }//GEN-LAST:event_formMouseMoved

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed

    }//GEN-LAST:event_fileMenuActionPerformed

    private void fileMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMenuMousePressed
        System.out.println("You pressed file menu!");
        addFolderMI.setEnabled(FileManager.getAddFolderEnabled());
        addFilesMI.setEnabled(FileManager.getAddFilesEnabled());
    }//GEN-LAST:event_fileMenuMousePressed

    private void addFolderMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFolderMIActionPerformed
        FileManager.addFolder();
        gp.createComponents();
    }//GEN-LAST:event_addFolderMIActionPerformed

    private void addFilesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilesMIActionPerformed
        FileManager.addFiles();
        gp.createComponents();
    }//GEN-LAST:event_addFilesMIActionPerformed

    private void newClassifierMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newClassifierMIActionPerformed
        createNewClassifier();
    }//GEN-LAST:event_newClassifierMIActionPerformed

    private void editClassifierMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editClassifierMIActionPerformed
        editClassifier();
    }//GEN-LAST:event_editClassifierMIActionPerformed

    private void resultsSettingsViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsSettingsViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultsSettingsViewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GalleryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GalleryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GalleryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GalleryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GalleryFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addFilesMI;
    private javax.swing.JMenuItem addFolderMI;
    private javax.swing.JMenuItem editClassifierMI;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem newClassifierMI;
    private javax.swing.JMenuItem resultsSettingsView;
    // End of variables declaration//GEN-END:variables

    private void createNewClassifier() {
        ClassifierSetupDialog csDialog = new ClassifierSetupDialog(this, true);

    }

    private void editClassifier() {
        String[] classifiers = ClassifierManager.getClassifierList();
        String classifierName = promptUserForClassifier(classifiers);
        ClassifierSetupDialog csDialog = new ClassifierSetupDialog(this, true, classifierName);
    }

    private String promptUserForClassifier(String[] classifiers) {
        String selected_classifier = (String) JOptionPane.showInputDialog(this,
                "Which classifier would you like to edit?",
                "Edit Classifier",
                JOptionPane.QUESTION_MESSAGE,
                null,
                classifiers,
                classifiers[0]);
        return selected_classifier;
    }
}
