/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package framecomponentstesting;

import static framecomponentstesting.ClassifierSetupDialog.REGULAR_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.REGULAR_RED_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.STEP_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.SUB_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.WHITE_TITLE_LABEL;
import static framecomponentstesting.ClassifierSetupDialog.blueBox1Y;
import static framecomponentstesting.ClassifierSetupDialog.confirmButtonsH;
import static framecomponentstesting.ClassifierSetupDialog.confirmButtonsW;
import static framecomponentstesting.ClassifierSetupDialog.fieldBuffer;
import static framecomponentstesting.ClassifierSetupDialog.formatLabel;
import static framecomponentstesting.ClassifierSetupDialog.leftBuffer;
import static framecomponentstesting.ClassifierSetupDialog.regularFont;
import static framecomponentstesting.ClassifierSetupDialog.smallBuffer;
import static framecomponentstesting.ClassifierSetupDialog.stepTitleLocY;
import static framecomponentstesting.ClassifierSetupDialog.subTitleBuffer;
import static framecomponentstesting.ClassifierSetupDialog.tfRegularHeight;
import static framecomponentstesting.ClassifierSetupDialog.tfRegularWidth;
import static framecomponentstesting.ClassifierSetupDialog.title2LocY;
import static framecomponentstesting.ClassifierSetupDialog.titleBoxBuffer;
import static framecomponentstesting.ClassifierSetupDialog.topTitleLocY;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author Alisa
 */
public class ConfigPanel extends javax.swing.JPanel {

    static Dimension panelSize = ConfigDialog.panelSize;

    static int col2X = (int) ((panelSize.width - leftBuffer) / 3) + leftBuffer;
    static int col3X = (int) ((panelSize.width - leftBuffer) * 2 / 3) + leftBuffer;
    static int comboBoxWidth = 170;
    static int comboBoxHeight = 20;
    static int optionLabelY = title2LocY + subTitleBuffer * 2;
    static int imageLabelY = optionLabelY + 300;

    JComboBox config1CB;
    JComboBox config2CB;
    JComboBox config3CB;

    JCheckBox config1Check;
    JCheckBox config2Check;
    JCheckBox config3Check;

    String config1Selection = "";
    String config2Selection = "";
    String config3Selection = "";

    JLabel config1OptionsTitle = new JLabel("");
    JLabel config2OptionsTitle = new JLabel("");
    JLabel config3OptionsTitle = new JLabel("");
    
    JLabel imageErrorLabel = new JLabel("PLEASE CHOOSE AN IMAGE!");

    ArrayList<JCheckBox> options1Checks = new ArrayList<>();
    ArrayList<JCheckBox> options2Checks = new ArrayList<>();
    ArrayList<JCheckBox> options3Checks = new ArrayList<>();

    ArrayList<JComboBox> options1CBs = new ArrayList<>();
    ArrayList<JComboBox> options2CBs = new ArrayList<>();
    ArrayList<JComboBox> options3CBs = new ArrayList<>();

    ArrayList<JLabel> options1Labels = new ArrayList<>();
    ArrayList<JLabel> options2Labels = new ArrayList<>();
    ArrayList<JLabel> options3Labels = new ArrayList<>();

    JTextField imagePathTF = new JTextField("");
    JDialog dialog;

    /**
     * Creates new form ClassifyImagePanel
     */
    public ConfigPanel(JDialog d) {
        initComponents();
        dialog = d;
        setBackground(Color.white);
        setPreferredSize(panelSize);
        createComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Painter.paintBlueClassifierRect(g, blueBox1Y);
        //Painter.paintBlueClassifierTopRect(g);
        Painter.paintBlueClassifierBottomRect(g);
    }

    private void createComponents() {

        removeAll();
        createStepTitle();
        createConfigureTitle();
        createConfigureSubTitles();
        createConfigureSetupFields();
        createOptionSubTitles();
        createOptionFields();
        createImageSubTitle();
        createImageSubFields();
        createConfirmButtons();
        repaint();
    }

    private void createStepTitle() {
        JLabel titleLabel = new JLabel("CLASSIFICATION SETTINGS");
        titleLabel.setBounds(leftBuffer, stepTitleLocY, 200, 20);
        add(formatLabel(titleLabel, STEP_TITLE_LABEL));
    }

    private void createConfigureTitle() {
        JLabel titleLabel = new JLabel("CONFIGURE CLASSIFIERS");
        titleLabel.setBounds(leftBuffer, title2LocY + titleBoxBuffer, 200, 20);
        add(formatLabel(titleLabel, WHITE_TITLE_LABEL));
    }

    private void createConfigureSubTitles() {
        int y = title2LocY + subTitleBuffer;
        JLabel config1Label = new JLabel("CONFIGURATION 1: ");
        config1Label.setBounds(leftBuffer, y, 200, 20);
        add(formatLabel(config1Label, SUB_TITLE_LABEL));

        JLabel config2Label = new JLabel("CONFIGURATION 2: ");
        config2Label.setBounds(col2X, y, 200, 20);
        add(formatLabel(config2Label, SUB_TITLE_LABEL));

        JLabel config3Label = new JLabel("CONFIGURATION 3: ");
        config3Label.setBounds(col3X, y, 200, 20);
        add(formatLabel(config3Label, SUB_TITLE_LABEL));

    }

    Action configCheck2Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            config2CB.setEnabled(!config2CB.isEnabled());
            setOptionsVisibility();
        }
    };

    Action configCheck3Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            config3CB.setEnabled(!config3CB.isEnabled());
            setOptionsVisibility();
        }
    };
    Action config1CBAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            config1Selection = "" + config1CB.getSelectedItem();
            createOptions(1);
            setOptionsVisibility();
            revalidate();
            repaint();
            //createComponents();
        }
    };
    Action config2CBAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            config2Selection = "" + config2CB.getSelectedItem();
            createOptions(2);
            setOptionsVisibility();
            revalidate();
            repaint();
        }
    };
    Action config3CBAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            config3Selection = "" + config3CB.getSelectedItem();
            createOptions(3);
            setOptionsVisibility();
            revalidate();
            repaint();
        }
    };

    private void createConfigureSetupFields() {

        int y = title2LocY + fieldBuffer;
        int checkBoxW = 20;
        int checkBuffer = checkBoxW + smallBuffer;
        config2Check = new JCheckBox();
        config3Check = new JCheckBox();

        config2Check.setBounds(col2X - checkBuffer, y, checkBoxW, checkBoxW);
        config3Check.setBounds(col3X - checkBuffer, y, checkBoxW, checkBoxW);

        config2Check.addActionListener(configCheck2Action);
        config3Check.addActionListener(configCheck3Action);

        add(config2Check);
        add(config3Check);

        String[] classifiers = ClassifierManager.getClassifierList();

        config1CB = new JComboBox(classifiers);
        config1CB.addActionListener(config1CBAction);
        config2CB = new JComboBox(classifiers);
        config2CB.addActionListener(config2CBAction);
        config3CB = new JComboBox(classifiers);
        config3CB.addActionListener(config3CBAction);
        config1CB.setSelectedItem(classifiers[0]);
        config2CB.setSelectedItem(classifiers[0]);
        config3CB.setSelectedItem(classifiers[0]);

        if (!config1Selection.equals("")) {
            config1CB.setSelectedItem(config1Selection);
        } else if (!config2Selection.equals("")) {
            config2CB.setSelectedItem(config1Selection);
        } else if (!config3Selection.equals("")) {
            config3CB.setSelectedItem(config1Selection);

        }

        config1CB.setEnabled(true);
        config2CB.setEnabled(false);
        config3CB.setEnabled(false);

        config1CB.setBounds(leftBuffer, y, comboBoxWidth, comboBoxHeight);
        config2CB.setBounds(col2X, y, comboBoxWidth, comboBoxHeight);
        config3CB.setBounds(col3X, y, comboBoxWidth, comboBoxHeight);

        add(config1CB);
        add(config2CB);
        add(config3CB);
    }

    private void createOptionSubTitles() {
        int y = title2LocY + subTitleBuffer;
        config1OptionsTitle = new JLabel("SET OPTIONS:");
        config1OptionsTitle.setBounds(leftBuffer, optionLabelY, 200, 20);
        add(formatLabel(config1OptionsTitle, SUB_TITLE_LABEL));

        config2OptionsTitle = new JLabel("SET OPTIONS");
        config2OptionsTitle.setBounds(col2X, optionLabelY, 200, 20);
        config2OptionsTitle.setVisible(config2CB.isEnabled());
        add(formatLabel(config2OptionsTitle, SUB_TITLE_LABEL));

        config3OptionsTitle = new JLabel("SET OPTIONS");
        config3OptionsTitle.setBounds(col3X, optionLabelY, 200, 20);
        config3OptionsTitle.setVisible(config3CB.isEnabled());
        add(formatLabel(config3OptionsTitle, SUB_TITLE_LABEL));
    }

    private void createOptionFields() {
        createOptions(1);
        createOptions(2);
        createOptions(3);
        setOptionsVisibility();

    }

    private void createOptions(int col) {

        int y = optionLabelY + 40;
        int x = 0;
        int lineSpace = 25;
        boolean visible = false;
        String data = "";
        if (col == 1) {
            data = ClassifierManager.loadData("" + config1CB.getSelectedItem());
            x = leftBuffer;
            renewLists(1);

            visible = true;
        } else if (col == 2) {
            data = ClassifierManager.loadData("" + config2CB.getSelectedItem());
            x = col2X;
            renewLists(2);

        } else if (col == 3) {
            data = ClassifierManager.loadData("" + config3CB.getSelectedItem());
            x = col3X;
            renewLists(3);

        }
        int labelX = x + 30;
        int cbX = labelX + 50;
        int cbW = comboBoxWidth - 80;
        ArrayList<String> options = ClassifierManager.unmarkClassifyCmdOpt(data);
        for (int i = 0; i < options.size(); i++) {

            JCheckBox checkBox = new JCheckBox();
            checkBox.setBounds(x, y + lineSpace * i, 20, 20);
            checkBox.setVisible(visible);
            addCheckToOptionsList(checkBox, col);
            add(checkBox);

            String option = options.get(i);
            JLabel optionLabel = new JLabel(ClassifierManager.getKeyFromUnmarked(option));
            optionLabel.setBounds(labelX, y + lineSpace * i, WIDTH, WIDTH);
            optionLabel.setVisible(visible);
            addLabelToOptionsList(optionLabel, col);
            add(formatLabel(optionLabel, REGULAR_LABEL));

            String[] values = ClassifierManager.getValuesFromUnmarked(option);
            JComboBox optionCB;
            if (values == null) {
                optionCB = new JComboBox();

            } else {
                optionCB = new JComboBox(values);
            }
            optionCB.setVisible(false);
            optionCB.setBounds(cbX, y + lineSpace * i, cbW, 20);
            addCBToOptionsList(optionCB, col);
            add(optionCB);

        }
    }
    Action options1CheckAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            setCBVisibility(options1Checks, options1CBs);

        }

    };
    Action options2CheckAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            setCBVisibility(options2Checks, options2CBs);
        }
    };
    Action options3CheckAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            setCBVisibility(options3Checks, options3CBs);
        }
    };

    Action imagePathBrowseAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            File selection = FileManager.promptUserToAddFile("Choose Image for Classification");
            imagePathTF.setText(selection.getPath());
            imageErrorLabel.setVisible(false);

        }
    };

    private void addCheckToOptionsList(JCheckBox checkBox, int col) {
        if (col == 1) {
            checkBox.addActionListener(options1CheckAction);
            options1Checks.add(checkBox);
        } else if (col == 2) {
            checkBox.addActionListener(options2CheckAction);
            options2Checks.add(checkBox);
        } else if (col == 3) {
            checkBox.addActionListener(options3CheckAction);
            options3Checks.add(checkBox);
        }
    }

    private void addCBToOptionsList(JComboBox optionCB, int col) {
        if (col == 1) {
            options1CBs.add(optionCB);
        } else if (col == 2) {
            options2CBs.add(optionCB);
        } else if (col == 3) {
            options3CBs.add(optionCB);
        }
    }

    private void setOptionsVisibility() {
        if (config2CB.isEnabled()) {
            setOptionsVisibility(2, true);

        } else {
            setOptionsVisibility(2, false);
            config2Selection = "";
        }
        if (config3CB.isEnabled()) {
            setOptionsVisibility(3, true);
        } else {
            setOptionsVisibility(3, false);
            config2Selection = "";
        }
    }

    private void setCBVisibility(ArrayList<JCheckBox> optionChecks, ArrayList<JComboBox> optionCBs) {
        for (int i = 0; i < optionChecks.size(); i++) {
            JCheckBox checkBox = optionChecks.get(i);
            optionCBs.get(i).setVisible(checkBox.isSelected() && optionCBs.get(i).getItemCount() > 0);
        }
    }

    private void createImageSubTitle() {
        int y = imageLabelY;
        JLabel option1Label = new JLabel("CHOOSE IMAGE:");
        option1Label.setBounds(leftBuffer, y, 200, 20);
        add(formatLabel(option1Label, SUB_TITLE_LABEL));
    }

    private void createImageSubFields() {
        int y = imageLabelY + 40;
        JLabel pathLabel = new JLabel("PATH:");
        pathLabel.setBounds(leftBuffer, y, 200, 20);
        add(formatLabel(pathLabel, REGULAR_LABEL));

        imagePathTF.setBounds(leftBuffer + pathLabel.getWidth() + smallBuffer,
                y, tfRegularWidth * 2, tfRegularHeight);
        add(imagePathTF);

        JButton parserButton = new JButton("Browse");
        parserButton.setBounds(imagePathTF.getLocation().x
                + imagePathTF.getWidth() + smallBuffer, y, confirmButtonsW,
                confirmButtonsH);
        parserButton.addActionListener(imagePathBrowseAction);
        add(parserButton);
        
        int errorX = parserButton.getLocation().x+parserButton.getWidth()+smallBuffer;
        imageErrorLabel.setBounds(errorX, y, 50,50);
        imageErrorLabel = formatLabel(imageErrorLabel, REGULAR_RED_LABEL);
        imageErrorLabel.setVisible(false);
        add(imageErrorLabel);
        
    }

    Action cancelAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("Cancel!");
            dialog.dispose();
        }
    };
    Action classifyAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("classify!");
            if (imagePathTF.getText().equals("")) {
                imageErrorLabel.setVisible(true);
                return;
            } 
            dialog.dispose();
            classify();
            
            // dialog.recordData(combineData());
            // dialog.goToPage(me, page + 1);

        }
    };

    private void createConfirmButtons() {
        JButton cancelButton = new JButton("CANCEL");
        cancelButton.setForeground(Color.black);
        cancelButton.setBounds(ClassifierSetupDialog.confirmButton1X,
                ClassifierSetupDialog.confirmButtonsY,
                ClassifierSetupDialog.confirmButtonsW,
                ClassifierSetupDialog.confirmButtonsH);
        cancelButton.setFont(regularFont);
        cancelButton.addActionListener(cancelAction);
        add(cancelButton);

        JButton classifyButton = new JButton("");

        classifyButton.setText("CLASSIFY");
        classifyButton.addActionListener(classifyAction);

        classifyButton.setForeground(Color.green);
        classifyButton.setBounds(ClassifierSetupDialog.confirmButton2X,
                ClassifierSetupDialog.confirmButtonsY,
                ClassifierSetupDialog.confirmButtonsW,
                ClassifierSetupDialog.confirmButtonsH);
        classifyButton.setFont(regularFont);

        add(classifyButton);
    }

    private void addLabelToOptionsList(JLabel optionLabel, int col) {
        if (col == 1) {
            options1Labels.add(optionLabel);
        } else if (col == 2) {
            options2Labels.add(optionLabel);
        } else if (col == 3) {
            options3Labels.add(optionLabel);
        }
    }

    private void setOptionsVisibility(int col, boolean visible) {
        if (col == 2) {
            config2OptionsTitle.setVisible(visible);
            for (JCheckBox options2Check : options2Checks) {
                options2Check.setVisible(visible);
            }
            for (JLabel options2Label : options2Labels) {
                options2Label.setVisible(visible);
            }
            if (!visible) {
                for (JComboBox options2CB : options2CBs) {
                    options2CB.setVisible(visible);
                }
            } else {
                setCBVisibility(options2Checks, options2CBs);
            }
        } else if (col == 3) {
            config3OptionsTitle.setVisible(visible);
            for (JCheckBox options3Check : options3Checks) {
                options3Check.setVisible(visible);
            }
            for (JLabel options3Label : options3Labels) {
                options3Label.setVisible(visible);
            }
            if (!visible) {
                for (JComboBox options3CB : options3CBs) {
                    options3CB.setVisible(visible);
                }
            } else {
                setCBVisibility(options3Checks, options3CBs);
            }
        }
    }

    void classify() {
        ArrayList<ClassifyData> classifyDataList = new ArrayList<>();

        String imagePath = imagePathTF.getText();

        String classifierName1 = "" + config1CB.getSelectedItem();
        String options1 = getOptions(options1Checks, options1Labels, options1CBs);
        classifyDataList.add(new ClassifyData(classifierName1, options1));

        if (config2CB.isEnabled()) {
            String classifierName2 = "" + config2CB.getSelectedItem();
            String options2 = getOptions(options2Checks, options2Labels, options2CBs);
            classifyDataList.add(new ClassifyData(classifierName2, options2));
        }
        if (config3CB.isEnabled()) {
            String classifierName3 = "" + config3CB.getSelectedItem();
            String options3 = getOptions(options3Checks, options3Labels, options3CBs);
            classifyDataList.add(new ClassifyData(classifierName3, options3));

        }

//        ClassifierManager.classifyNewImage("" + config1CB.getSelectedItem(), imagePathTF.getText(), options1);
        new ClassifyImageFrame(classifyDataList, imagePath);
    }

    String getOptions(ArrayList<JCheckBox> checks, ArrayList<JLabel> labels, ArrayList<JComboBox> cbs) {
        ArrayList<String> options = new ArrayList<>();
        for (int i = 0; i < checks.size(); i++) {
            JCheckBox checkBox = checks.get(i);
            if (checkBox.isSelected()) {
                String optionStr = labels.get(i).getText() + cbs.get(i).getSelectedItem();
                options.add(optionStr);
                System.out.println("\t" + optionStr);
            }
        }
        
        return ClassifierManager.optionsToString(options);
    }

    private void renewLists(int col) {
        if (col == 1) {
            for (JLabel options1Label : options1Labels) {
                remove(options1Label);
            }
            for (JCheckBox options1Check : options1Checks) {
                remove(options1Check);
            }
            for (JComboBox options1CB : options1CBs) {
                remove(options1CB);
            }
            options1Labels = new ArrayList<>();
            options1Checks = new ArrayList<>();
            options1CBs = new ArrayList<>();
        } else if (col == 2) {
            for (JLabel options1Label : options2Labels) {
                remove(options1Label);
            }
            for (JCheckBox options1Check : options2Checks) {
                remove(options1Check);
            }
            for (JComboBox options1CB : options2CBs) {
                remove(options1CB);
            }
            options2Labels = new ArrayList<>();
            options2Checks = new ArrayList<>();
            options2CBs = new ArrayList<>();
        } else if (col == 3) {
            for (JLabel options1Label : options3Labels) {
                remove(options1Label);
            }
            for (JCheckBox options1Check : options3Checks) {
                remove(options1Check);
            }
            for (JComboBox options1CB : options3CBs) {
                remove(options1CB);
            }
            options3Labels = new ArrayList<>();
            options3Checks = new ArrayList<>();
            options3CBs = new ArrayList<>();
        }
    }
}
